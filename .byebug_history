c
header.gsub(/SHOWING (\d+) OF (\d+) BRANDS/, '\1')
header.gsub(/SHOWING (\d+) OF (\d+) BRANDS/, '\3')
header.gsub(/SHOWING (\d+) OF (\d+) BRANDS/, '')
header.gsub(/SHOWING (\d+) OF (\d+) BRANDS/, '\2')
header.gsub(/SHOWING (\d+) OF (\d+) BRANDS/, '\1')
header = find('div.dataTables_info').text
find('div.dataTables_info').text
exit
brand_list.any?{|el| el.brand?(name)}
brand_list[0].brand_title
brand_list[0]
brand_list
brand_list.map{|a| a.text}
c
item
exit
item
menu_items.find{ |el|  el.text == name}
click.item
item
menu_items.find{ |el|  el.text == name}.text
menu_items.find{ |el|  el.text == name}
name
menu_items
item
menu_items.find{ |el|  el.text == name}
menu_items.find{ |el|  el.text == name
name
menu_items
item
brand_list
c
brand_list.map {|x| x.text}
brand_list
name
brand_list.map {|x| x.text}.map.any?(name)
brand_list.map {|x| x.text}.map.any?(name.downcase)
brand_list.map {|x| x.text}.any?(name.downcase)
brand_list.map {|x| x.text}.downcase
name
brand_list.map {|x| x.text}.any?(name)
brand_list.map {|x| x.text}.any?brand(name)
brand_list.map {|x| x.text}
brand_list.text
brand_list.map {|x| x.text}
 brand_list.map { |el| el.text }.any?{|el| el.brand?(name)}
brand_list
c
item.text
item
name
item = menu_items.find{ |el|  el.text == name}
menu_items.map {|x| x.text}
menu_items.text
menu_items
item
brand_list
c
name
 brand_list.map { |el| el.text }.any?(name)
 brand_list.map { |el| el.text }.any?{|el| el.brand?(name)}
brand_list
item.click
item = menu_items.find{ |el|  el.text == name}
menu_items
brand_list
name
item
c
name
item
item = menu_items.find{ |el|  el.text == name}
item
c
counter
c
(brand_title.text.downcase).has.(name.downcase)?
(brand_title.text).has.name?(name).downcase
(brand_title.text.downcase).has.(name.downcase)?
(brand_title.text.downcase).all?(name.downcase)
(brand_title.text.downcase).sort(name.downcase)
(brand_title.text.downcase.to_arr).any?(name.downcase)
(brand_title.text.downcase.to_str).any?(name.downcase)
(brand_title.text.downcase.to_c).any?(name.downcase)
(brand_title.text.downcase.to_s).any?(name.downcase)
(brand_title.text.downcase.to_r).any?(name.downcase)
(brand_title.text.downcase.to_i).any?(name.downcase)
string.methods.sort
(brand_title.text.downcase).map{|el| el.text==(name.downcase)}
(brand_title.text.downcase).find{|el| el.text==(name.downcase)}
(brand_title.text.downcase).any?(name.downcase)
name.downcase.methods.sort
name.downcase)
brand_title.text.downcase
(brand_title.text.downcase).map(name.downcase)
(brand_title.text.downcase).map{|el| el.text(name.downcase)}
(brand_title.text.downcase).any?(name.downcase)
brand_title
c
brand_title
brand_list.map { |el| el.text }.any?(name)}.downcase
brand_list.map { |el| el.text }.any?{|el| el(name)}.downcase
brand
brand_list.map { |el| el.text }.any?{|el| el.brand?(name)}.downcase
brand_list.map { |el| el.text }.map{|el| el.brand?(name)}
brand_list.map { |el| el.text }.any?{|el| el.brand?(name)}
brand_list.map { |el| el.text }.any?{|el| el.brand?(name)
brand_list.map { |el| el.text }
brand_list.to_s
brand_list.text
name
brand_list
brand_list(0).text
brand_list(0)
brand_list.methods.sort
brand_list.methodss.sort
brand_list.text
brand_list
brandlist
 brand_list.any?{|el| el.brand?(name)
c
(brand_title[0].text.downcase).any?(name.downcase).map{ |x| x.text}
(brand_title[0].text.downcase).any?(name.downcase)
brand_title[0].text.downcase
brand_title[0]
brand_title
c
brand_list.last.brand_title.map{|el| el.text.downcase}.any?(name.downcase)
brand_list.last.brand_title.map{|el| el.text.downcase}
brand_list.last.brand_title.map{|el| el.text}
name
brand_list.last.brand_title.map{|el| el.text}
brand_list.last.brand_title.map{|el| el.text}.any?(name)
brand_list[0].brand_title.map{|el| el.text}.any?(name)
brand_list[0].brand_title.map{|el| el.text}
brand_list[0].brand_title.text
brand_list[0].brand_title
brand_list[0].brand_title.map{|el| el.text}
brand_list[0].brand_title.map.first
brand_list[0].brand_title.map
brand_list[0].brand_title
brand_title
brand_list[0].brand_title.class
brand_list[0].brand_title.text
name
brand_list[0].brand_title
brand_list[0].text
brand_list[0]
brands = brand_list.map{|el| el.text}
brand_title.text
name
brand_list[0].brand_title
brand_list[0].brand_title.any?(name)
brand_list.last.brand?(name)
brand_list[0].brand_title..text
brand_list[0].brand_title
name
brand_list[0].brand?(name)
brand_list[0]
brand_list.map{|el| el.text}.include?(
brand_list.methods.sort
brand_list.method.sort.
brand_list.method.sort
brand_list.count
brand_list
brand_list.uppercase
brand_list.has_any?(name)
brand_list.select{ |el| el.text == "name"}
brand_list.any?(name)
brand_list
name
c
name
brand_title.any?(&:name)
brand_title.any?(name)
brand_title.methods.sort
brand_title.count
brand_title
name
brand_title.has_text?(name)
name
c
name.select {|el| el.text == "full frontal with samantha bee"
name.select {|el| el.text == ""full frontal with samantha bee"
name.downcase
name
brands_list.map {|el| el.text.downcase}
brands_list.any? {|el| el.text.downcase}
brand = brands_list.any? {|el| el.text.downcase == name.downcase }
name
c
exit
name
load '/home/vasanthi/git/qa/web/automation/training/lib/brand_list.rb'
item
item = menu_items.map{|el| el.text == item}
item = menu_items.find{|el| el.text == item}
item = menu_items
exit
 item = menu_items.find{ |el|  el.text == item}
item.count
item( Full Frontal Samantha Bee )
item.click
item
c
xx.click
xx = menu_items.find{|x| x.text == item }
menu_items.find{|x| x.text == item }
menu_items.map{|x| x.text }
menu_items.count
menu_items
item
